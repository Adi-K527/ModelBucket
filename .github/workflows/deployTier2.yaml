name: "Deploy model Tier 2"


on:
    workflow_dispatch:
      inputs:
        filename:
          description: "name of model file"
          required: true
        secrettoken:
          description: "mb auth token"
          required: true
        project_id:
          description: "id of project"
          required: true
        model_id: 
          description: "id of model"
          required: true

env:
  AWS_REGION:            ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY:        ${{ secrets.ECR_REPOSITORY }}
  ACCOUNT_ID:            ${{ secrets.ACCOUNT_ID }}
  AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  MODEL_REQS_BUCKET:     ${{ secrets.MODEL_REQS_BUCKET }}
  MODEL_FILES_BUCKET:    ${{ secrets.MODEL_FILES_BUCKET }}
  BACKEND_URL:           ${{ secrets.VITE_BACKEND_URI }}
  HETZNER_TOKEN:         ${{ secrets.HETZNER_TOKEN }}
  HETZNER_SSH_KEY:       ${{ secrets.HETZNER_SSH_KEY }}


jobs:
    deploy:
        name: Deploy
        runs-on: ubuntu-latest

        steps:
            - name: Create secret environment variables from inputs 
              run: |
                FILENAME=$(jq -r '.inputs.filename' $GITHUB_EVENT_PATH)
                echo ::add-mask::$FILENAME
                echo FILENAME="$FILENAME" >> $GITHUB_ENV
        
                MB_SECRET_TOKEN=$(jq -r '.inputs.secrettoken' $GITHUB_EVENT_PATH)
                echo ::add-mask::$MB_SECRET_TOKEN
                echo MB_SECRET_TOKEN="$MB_SECRET_TOKEN" >> $GITHUB_ENV
        
                PROJECT_ID=$(jq -r '.inputs.project_id' $GITHUB_EVENT_PATH)
                echo ::add-mask::$PROJECT_ID
                echo PROJECT_ID="$PROJECT_ID" >> $GITHUB_ENV
        
                MODEL_ID=$(jq -r '.inputs.model_id' $GITHUB_EVENT_PATH)
                echo ::add-mask::$MODEL_ID
                echo MODEL_ID="$MODEL_ID" >> $GITHUB_ENV

                echo ::add-mask::$SERVER_IPV4
                echo SERVER_IPV4="$SERVER_IPV4" >> $GITHUB_ENV

                echo ::add-mask::$SERVER_ID
                echo SERVER_ID="$SERVER_ID" >> $GITHUB_ENV
    
            - name: Checkout
              uses: actions/checkout@v4

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
              with:
                aws-access-key-id:     ${{ env.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
                aws-region:            ${{ env.AWS_REGION }}
      
            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a
      
            - name: Delete existing image
              id: delete-image-if-present
              run: |
                set -e
                echo "::add-mask::${{ env.FILENAME }}"
                if aws ecr describe-images --repository-name ${{ env.ECR_REPOSITORY }} --image-ids imageTag=${{ env.FILENAME }} --region us-east-1 > /dev/null 2>&1; then
                  aws ecr batch-delete-image --repository-name ${{ env.ECR_REPOSITORY }} --image-ids imageTag=${{ env.FILENAME }} --region us-east-1 > /dev/null 2>&1
                fi
      
            - name: Build, tag, and push image to Amazon ECR
              id: build-image
              env:
                ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                IMAGE_TAG:    ${{ env.FILENAME }}
                AWS_REGION:   ${{ env.AWS_REGION }}
                AWS_ACCESS_KEY_ID:     ${{ env.AWS_ACCESS_KEY_ID }}
                AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
                S3_BUCKET:  ${{ env.MODEL_REQS_BUCKET }}
                S3_KEY_REQ: ${{ env.FILENAME }}
              run: |
                echo "::add-mask::${{ env.IMAGE_TAG }}"
                docker build --build-arg AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID --build-arg AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY --build-arg AWS_DEFAULT_REGION=$AWS_REGION --build-arg S3_BUCKET=$S3_BUCKET --build-arg S3_KEY_REQ=$S3_KEY_REQ -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./deployments/Tier-2
                docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
                echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

            - uses: TimDaub/hetzner-cloud-deploy-server-action@v2
              with:
                server-name: ${{ env.FILENAME }}
                server-image: "ubuntu-20.04"
                server-type: "cx22"
                ssh-key-name: "hetzner_key"
                hcloud-token: ${{ secrets.HETZNER_TOKEN }}
                delete-server: false
            - uses: webfactory/ssh-agent@v0.4.1
              with:
                ssh-private-key: ${{ env.HETZNER_SSH_KEY }}
            - run: |
                ssh -o StrictHostKeyChecking=no root@${{ env.SERVER_IPV4 }} << 'EOF'
                  sudo apt update 
                  sudo apt upgrade -y
                  curl -sfL https://get.k3s.io | sh -
                  sudo apt install docker.io
                  snap install aws-cli --classic --yes
                  export AWS_ACCESS_KEY_ID="${{env.AWS_ACCESS_KEY_ID}}"
                  export AWS_SECRET_ACCESS_KEY="${{env.AWS_SECRET_ACCESS_KEY}}"
                  export AWS_DEFAULT_REGION="us-east-1"
                  docker login -u AWS -p $(aws ecr get-login-password) ${{env.ACCOUNT_ID}}.dkr.ecr.us-east-1.amazonaws.com
                  docker pull ${{env.ACCOUNT_ID}}.dkr.ecr.us-east-1.amazonaws.com/model_bucket_ecr:${{env.FILENAME}}
                  ACCOUNT=$(aws sts get-caller-identity --query 'Account' --output text)
                  REGION=us-east-1
                  SECRET_NAME=${REGION}-ecr-registry
                  EMAIL=abc@xyz.com
                  TOKEN=`aws ecr --region=$REGION get-authorization-token --output text --query authorizationData[].authorizationToken | base64 -d | cut -d: -f2`
                  kubectl delete secret --ignore-not-found $SECRET_NAME
                  kubectl create secret docker-registry $SECRET_NAME \
                  --docker-server=https://$ACCOUNT.dkr.ecr.${REGION}.amazonaws.com \
                  --docker-username=AWS \
                  --docker-password="${TOKEN}" \
                  --docker-email="${EMAIL}"
                EOF