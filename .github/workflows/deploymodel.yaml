name: "Deploy Model"

on:
  workflow_dispatch:
    inputs:
      filename:
        description: "name of model file"
        required: true
      secrettoken:
        description: "mb auth token"
        required: true
      project_id:
        description: "id of project"
        required: true
      model_id: 
        description: "id of model"
        required: true

env:
  AWS_REGION:            ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY:        ${{ secrets.ECR_REPOSITORY }}
  ACCOUNT_ID:            ${{ secrets.ACCOUNT_ID }}
  AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  MODEL_REQS_BUCKET:     ${{ secrets.MODEL_REQS_BUCKET }}
  MODEL_FILES_BUCKET:    ${{ secrets.MODEL_FILES_BUCKET }}
  BACKEND_URL:           ${{ secrets.VITE_BACKEND_URI }}

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Create secret environment variables from inputs 
        run: |
          FILENAME=$(jq -r '.inputs.filename' $GITHUB_EVENT_PATH)
          echo ::add-mask::$FILENAME
          echo FILENAME="$FILENAME" >> $GITHUB_ENV

          MB_SECRET_TOKEN=$(jq -r '.inputs.secrettoken' $GITHUB_EVENT_PATH)
          echo ::add-mask::$MB_SECRET_TOKEN
          echo MB_SECRET_TOKEN="$MB_SECRET_TOKEN" >> $GITHUB_ENV

          PROJECT_ID=$(jq -r '.inputs.project_id' $GITHUB_EVENT_PATH)
          echo ::add-mask::$PROJECT_ID
          echo PROJECT_ID="$PROJECT_ID" >> $GITHUB_ENV

          MODEL_ID=$(jq -r '.inputs.model_id' $GITHUB_EVENT_PATH)
          echo ::add-mask::$MODEL_ID
          echo MODEL_ID="$MODEL_ID" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id:     ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Delete existing image
        id: delete-image-if-present
        run: |
          set -e
          echo "::add-mask::${{ env.FILENAME }}"
          if aws ecr describe-images --repository-name ${{ env.ECR_REPOSITORY }} --image-ids imageTag=${{ env.FILENAME }} --region us-east-1 > /dev/null 2>&1; then
            aws ecr batch-delete-image --repository-name ${{ env.ECR_REPOSITORY }} --image-ids imageTag=${{ env.FILENAME }} --region us-east-1 > /dev/null 2>&1
          fi

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG:    ${{ env.FILENAME }}
          AWS_REGION:   ${{ env.AWS_REGION }}
          AWS_ACCESS_KEY_ID:     ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          S3_BUCKET:  ${{ env.MODEL_REQS_BUCKET }}
          S3_KEY_REQ: ${{ env.FILENAME }}
        run: |
          echo "::add-mask::${{ env.IMAGE_TAG }}"
          docker build --build-arg AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID --build-arg AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY --build-arg AWS_DEFAULT_REGION=$AWS_REGION --build-arg S3_BUCKET=$S3_BUCKET --build-arg S3_KEY_REQ=$S3_KEY_REQ -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./modelAPITemplate
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      
      - name: Create lambda
        id: deploy-lambda
        env:
          AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          FILENAME:              ${{ env.FILENAME }}
          ACCOUNT_ID:            ${{ secrets.ACCOUNT_ID }}
          ECR_REPOSITORY:        ${{ secrets.ECR_REPOSITORY }}
          MODEL_FILES_BUCKET:    ${{ secrets.MODEL_FILES_BUCKET }}
          IMAGE_TAG:             ${{ github.sha }}
        run: |
          set -e
          echo "::add-mask::${{ env.FILENAME }}"
          if ! aws lambda get-function --function-name ${{ env.FILENAME }} > /dev/null 2>&1; then
            aws lambda create-function \
              --function-name "${{ env.FILENAME }}" \
              --package-type "Image" \
              --code "ImageUri=${{ env.ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.FILENAME }}" \
              --role "arn:aws:iam::${{ env.ACCOUNT_ID }}:role/mb-lambda-deployment-iam-role" \
              --environment "Variables={MY_AWS_ACCESS_THING=${{ secrets.AWS_ACCESS_KEY_ID }},AWS_SECRET_ACCESS=${{ secrets.AWS_SECRET_ACCESS_KEY }},AWS_BUCKET=${{ env.MODEL_FILES_BUCKET }},MODEL_NAME=${{ env.FILENAME }}}" \
              --memory-size 256 \
              --timeout 300 > /dev/null 2>&1

            aws lambda create-function-url-config \
              --function-name "${{ env.FILENAME }}" \
              --auth-type NONE > /dev/null 2>&1

            aws lambda add-permission \
              --function-name "${{ env.FILENAME }}" \
              --action "lambda:InvokeFunctionUrl" \
              --principal "*" \
              --statement-id "FunctionURLAllowPublicAccess" \
              --function-url-auth-type NONE > /dev/null 2>&1
          else
            aws lambda update-function-code --function-name ${{ env.FILENAME }} --image-uri ${{ env.ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.FILENAME }} > /dev/null 2>&1
          fi

      - name: Update Model State
        id: update-model
        env:
          AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          ACCOUNT_ID:            ${{ secrets.ACCOUNT_ID }}
          ECR_REPOSITORY:        ${{ secrets.ECR_REPOSITORY }}
          MODEL_FILES_BUCKET:    ${{ secrets.MODEL_FILES_BUCKET }}
          IMAGE_TAG:             ${{ github.sha }}
          FILENAME:              ${{ env.FILENAME }}
          MB_SECRET_TOKEN:       ${{ env.MB_SECRET_TOKEN }}
          PROJECT_ID:            ${{ env.PROJECT_ID }}
          MODEL_ID:              ${{ env.MODEL_ID }}
          BACKEND_URL:           ${{ env.BACKEND_URL }}
        run: |
          set -e
          echo "::add-mask::${{ env.FILENAME }}"
          echo "::add-mask::${{ env.MB_SECRET_TOKEN }}"
          echo "::add-mask::${{ env.PROJECT_ID }}"
          echo "::add-mask::${{ env.MODEL_ID }}"

          FUNCTION_URL=$(aws lambda get-function-url-config --function-name ${{env.FILENAME}} | jq -r ".FunctionUrl")
          echo ::add-mask::$FUNCTION_URL
          echo FUNCTION_URL="$FUNCTION_URL" >> $GITHUB_ENV

          curl -X PUT \
            -H "Content-Type: application/json"\
            -d '{
                "secretAccessToken": "${{ env.MB_SECRET_TOKEN }}",
                "project_id":        "${{ env.PROJECT_ID }}",
                "model_id":          "${{ env.MODEL_ID }}",
                "state":             "ACTIVE",
                "model_url":         "${{ env.FUNCTION_URL }}"
            }' \
            "${{ env.BACKEND_URL }}/api/model/update"