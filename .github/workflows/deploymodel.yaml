name: "Deploy Model"

on:
  workflow_dispatch:
    inputs:
      filename:
        description: "name of model file"
        required: true

env:
  AWS_REGION:            ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY:        ${{ secrets.ECR_REPOSITORY }}
  ACCOUNT_ID:            ${{ secrets.ACCOUNT_ID }}
  AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  MODEL_REQS_BUCKET:     ${{ secrets.MODEL_REQS_BUCKET }}
  MODEL_FILES_BUCKET:    ${{ secrets.MODEL_FILES_BUCKET }}
  FILENAME:              ${{ inputs.filename }}


jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id:     ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG:    ${{ github.sha }}
          AWS_REGION:   ${{ env.AWS_REGION }}
          AWS_ACCESS_KEY_ID:     ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          S3_BUCKET:  ${{ env.MODEL_REQS_BUCKET }}
          S3_KEY_REQ: ${{ env.FILENAME }}
        run: |
          docker build --build-arg AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID --build-arg AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY --build-arg AWS_DEFAULT_REGION=$AWS_REGION --build-arg S3_BUCKET=$S3_BUCKET --build-arg S3_KEY_REQ=$S3_KEY_REQ -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./modelAPITemplate
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      
      # - name: Create lambda deployment infra
      #   id: lambda-deployment-infra
      #   env: 
          # AWS_ACCESS_KEY_ID:     ${{ env.AWS_ACCESS_KEY_ID }}
          # AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          # FILENAME:              ${{ env.FILENAME }}
          # ACCOUNT_ID:            ${{ secrets.ACCOUNT_ID }}
          # ECR_REPOSITORY:        ${{ secrets.ECR_REPOSITORY }}
          # MODEL_FILES_BUCKET:    ${{ secrets.MODEL_FILES_BUCKET }}
          # IMAGE_TAG:             ${{ github.sha }}
      #   run: |
      #     cd terraform/lambda_deployment
      #     terraform init
      #     terraform apply -auto-approve -var access_key=$AWS_ACCESS_KEY_ID -var secret_access_key=$AWS_SECRET_ACCESS_KEY -var file_name=$FILENAME -var account_id=$ACCOUNT_ID -var mb_ecr_name=$ECR_REPOSITORY -var image_tag=$IMAGE_TAG -var bucket_name=$MODEL_FILES_BUCKET > /dev/null 2>&1

      - name: Create lambda
        id: deploy-lambda
        env:
          AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          FILENAME:              ${{ env.FILENAME }}
          ACCOUNT_ID:            ${{ secrets.ACCOUNT_ID }}
          ECR_REPOSITORY:        ${{ secrets.ECR_REPOSITORY }}
          MODEL_FILES_BUCKET:    ${{ secrets.MODEL_FILES_BUCKET }}
          IMAGE_TAG:             ${{ github.sha }}
        run: |
          aws lambda create-function \
            --function-name "${{ env.FILENAME }}" \
            --package-type "Image" \
            --code "ImageUri=${{ env.ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}" \
            --role "arn:aws:iam::${{ env.ACCOUNT_ID }}:role/mb-lambda-deployment-iam-role" \
            --environment "Variables={MY_AWS_ACCESS_THING=${{ secrets.AWS_ACCESS_KEY_ID }},AWS_SECRET_ACCESS=${{ secrets.AWS_SECRET_ACCESS_KEY }},AWS_BUCKET=${{ secrets.MODEL_FILES_BUCKET }},MODEL_NAME=${{ env.FILENAME }}}" > /dev/null 2>&1
